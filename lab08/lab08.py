# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Njd4wrbe7xTSTUDO9wEpknt0CWA_qP0e

**Laboratorium: Redukcja wymiarów**

**1 Cel/Zakres**

• Redukcja liczby wymiarów.

*•* Ocena efektów redukcji wymiarów.

**2 Przygotowanie danych**

Dane są dwa poniższe wielowymiarowe zbiory danych.
```
from sklearn import datasets
data_breast_cancer = datasets.load_breast_cancer()
from sklearn.datasets import load_iris
data_iris = load_iris()
```
"""

#Zbiór danych breast_cancer
from sklearn import datasets
data_breast_cancer = datasets.load_breast_cancer()

#Zbior danych iris
from sklearn.datasets import load_iris
data_iris = load_iris()

"""**3 Ćwiczenie**
1. Przeprowadź analizę PCA, tak aby tak zredukować liczbę wymiarów dla każdego z w/w
zbiorów. Nowa przestrzeń ma pokrywać przynajmniej 90% różnorodności (zmienności) danych
i ma mieć jak najmniej wymiarów.
2. Ćwiczenia przeprowadź najpierw na oryginalnych danych, a później na danych
przeskalowanych. Porównaj wyniki.
W podanych zbiorach są istotnie różne zakresy dla poszczególnych cech. Aby je przeskalować
aby były porównywalne użyj StandardScaler(). Klasa PCA() centruje dane automatycznie,
ale ich nie skaluje!
3. Utwórz listę z współczynnikami zmienności nowych wymiarów (dla danych przeskalowanych).
W przypadku data_breast_cancer listę zapisz w pliku Pickle o nazwie pca_bc.pkl
3 pkt.
W przypadku data_iris listę zapisz w pliku Pickle o nazwie pca_ir.pkl
3 pkt.
4. Utwórz naiwną listę indeksów cech (oryginalnych wymiarów), które mają największy udział w
nowych cechach (wymiarach), po redukcji (dla danych przeskalowanych). Podpowiedź: zob.
atrybut components_ klasy PCA, znajdź indeks z największą wartością dla każdej składowej
(wartości mogą być ujemne!). Uwaga, jest to metoda naiwna, która nie zawsze będzie dawać
pożądane efekty np. wtedy gdy różnica pomiędzy największą wartością, a następną będzie
niewielka, co oznacza, że więcej niż jedna stara cecha istotnie wpływa na nowy wymiar.
W przypadku data_breast_cancer listę zapisz w pliku Pickle o nazwie idx_bc.pkl
3 pkt.
W przypadku data_iris listę zapisz w pliku Pickle o nazwie idx_ir.pkl
3 pkt.
"""

#Improtowanie bibliotek i funkcji
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import numpy as np
import pickle
import pandas as pd
from sklearn.datasets import load_breast_cancer, load_iris

#Zbiór breast_cancer
data_breast_cancer = load_breast_cancer(as_frame=True)
X_cancer = data_breast_cancer.data
Y_cancer = data_breast_cancer.target
X_cancer.shape #Kształt zbioru breast cancer

#Zbiór iris
data_iris = load_iris(as_frame=True)
X_iris = data_iris.data
Y_iris = data_iris.target
X_iris.shape #Kształt zbioru iris

"""**zad1**

Przeprowadź analizę PCA, tak aby tak zredukować liczbę wymiarów dla każdego z w/w zbiorów. Nowa przestrzeń ma pokrywać przynajmniej 90% różnorodności (zmienności) danych i ma mieć jak najmniej wymiarów.

Przydatne:
```
pca = PCA(n_components=0.8)
X2D = pca.fit_transform(X)
5 print(pca.explained_variance_ratio_)

```
"""

#zad1 Breast cancer
pca_cancer = PCA(n_components=0.9)
X_pca_cancer = pca_cancer.fit_transform(X_cancer)

print(f"Przed: {X_cancer.shape}")
print(f"Po: {X_pca_cancer.shape}")
print(f"PCA: {pca_cancer.explained_variance_ratio_} ")

#zad1 Iris
pca_iris = PCA(n_components=0.9)
X_pca_iris = pca_iris.fit_transform(X_iris)

print(f"Przed: {X_iris.shape}")
print(f"Po: {X_pca_iris.shape}")
print(f"PCA: {pca_iris.explained_variance_ratio_} ")

"""**zad2 **

Ćwiczenia przeprowadź najpierw na oryginalnych danych, a później na danych
przeskalowanych. Porównaj wyniki.
W podanych zbiorach są istotnie różne zakresy dla poszczególnych cech. Aby je przeskalować
aby były porównywalne użyj StandardScaler(). Klasa PCA() centruje dane automatycznie,
ale ich nie skaluje!
"""

#kalowanie
#Zastosowanie scalera do transformacji danych testowych aby zachować spójnośc standaryzacji
scaler = StandardScaler()
#dane przeskalowane
X_cancer_scaler = scaler.fit_transform(X_cancer)
X_iris_scaler = scaler.fit_transform(X_iris)

#Breast cancer
pca_cancer_scaler = PCA(n_components=0.9)
X_red_cancer_scaler = pca_cancer_scaler.fit_transform(X_cancer_scaler)

print(f"Przed: {X_cancer_scaler.shape}")
print(f"Po: {X_red_cancer_scaler.shape}")
print(f"PCA: {pca_cancer_scaler.explained_variance_ratio_} ")

#Iris
pca_iris_scaler = PCA(n_components=0.9)
X_red_iris_scaler = pca_iris_scaler.fit_transform(X_iris_scaler)

print(f"Przed: {X_iris_scaler.shape}")
print(f"Po: {X_red_iris_scaler.shape}")
print(f"PCA: {pca_iris_scaler.explained_variance_ratio_} ")

"""**zad3**

Utwórz listę z współczynnikami zmienności nowych wymiarów (dla danych przeskalowanych). W przypadku data_breast_cancer listę zapisz w pliku Pickle o nazwie pca_bc.pkl 3 pkt. W przypadku data_iris listę zapisz w pliku Pickle o nazwie pca_ir.pkl 3 pkt.
"""

#Zapisz do pliku
pd.to_pickle(pca_cancer_scaler.explained_variance_ratio_, "pca_bc.pkl")
pd.to_pickle(pca_iris_scaler.explained_variance_ratio_, "pca_ir.pkl")

"""**zad4**

Utwórz naiwną listę indeksów cech (oryginalnych wymiarów), które mają największy udział w nowych cechach (wymiarach), po redukcji (dla danych przeskalowanych). Podpowiedź: zob. atrybut components_ klasy PCA, znajdź indeks z największą wartością dla każdej składowej (wartości mogą być ujemne!). Uwaga, jest to metoda naiwna, która nie zawsze będzie dawać pożądane efekty np. wtedy gdy różnica pomiędzy największą wartością, a następną będzie niewielka, co oznacza, że więcej niż jedna stara cecha istotnie wpływa na nowy wymiar. W przypadku data_breast_cancer listę zapisz w pliku Pickle o nazwie idx_bc.pkl 3 pkt. W przypadku data_iris listę zapisz w pliku Pickle o nazwie idx_ir.pkl 3 pkt.
"""

#Breast cancer
index_list_cancer = [np.argmax(abs(x)) for x in pca_cancer_scaler.components_]
print("Indeksy najważniejszych cech dla danych dotyczących raka piersi:")
print(index_list_cancer)

#iris
index_list_iris = [np.argmax(abs(x)) for x in pca_iris_scaler.components_]
print("Indeksy najważniejszych cech dla danych dotyczących irysów:")
print(index_list_iris)

#Zapisz do pliku
pd.to_pickle(index_list_cancer, "idx_bc.pkl")
pd.to_pickle(index_list_iris, "idx_ir.pkl")

"""**4 Prześlij raport**

Prześlij plik o nazwie lab08/lab08.py realizujący ww. ćwiczenia.
Sprawdzane będzie, czy skrypt Pythona tworzy wszystkie wymagane pliki oraz czy ich zawartość
jest poprawna.
"""